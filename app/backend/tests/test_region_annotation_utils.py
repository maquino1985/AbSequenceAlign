import pytest
from backend.region_annotation_utils import annotate_all_schemes

# Example scFv sequence (VH-linker-VL)
SCFV_SEQ = (
    "EVQLVESGGGLVQPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCAR"  # VH
    "GGGGS"  # Linker
    "DIQMTQSPSSLSASVGDRVTITCRASQDISNYLNWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYNSYPLTFGQGTKVEIK"  # VL
)

# Example ANARCI numbering output for VH and VL domains (truncated, for demonstration)
# In practice, you would get this from ANARCI, but here we mock it for the test
VH_NUMBERING = [
    ((1, " "), "E"),
    ((2, " "), "V"),
    ((3, " "), "Q"),
    ((4, " "), "L"),
    ((5, " "), "V"),
    ((6, " "), "E"),
    ((7, " "), "S"),
    ((8, " "), "G"),
    ((9, " "), "G"),
    ((10, " "), "G"),
    ((11, " "), "L"),
    ((12, " "), "V"),
    ((13, " "), "Q"),
    ((14, " "), "P"),
    ((15, " "), "G"),
    ((16, " "), "G"),
    ((17, " "), "S"),
    ((18, " "), "L"),
    ((19, " "), "R"),
    ((20, " "), "L"),
    ((21, " "), "S"),
    ((22, " "), "C"),
    ((23, " "), "A"),
    ((24, " "), "A"),
    ((25, " "), "S"),
    ((26, " "), "G"),
    ((27, " "), "F"),
    ((28, " "), "T"),
    ((29, " "), "F"),
    ((30, " "), "S"),
    ((31, " "), "S"),
    ((32, " "), "Y"),
    ((33, " "), "A"),
    ((34, " "), "M"),
    ((35, " "), "S"),
    ((36, " "), "W"),
    ((37, " "), "V"),
    ((38, " "), "R"),
    ((39, " "), "Q"),
    ((40, " "), "A"),
    ((41, " "), "P"),
    ((42, " "), "G"),
    ((43, " "), "K"),
    ((44, " "), "G"),
    ((45, " "), "L"),
    ((46, " "), "E"),
    ((47, " "), "W"),
    ((48, " "), "V"),
    ((49, " "), "S"),
    ((50, " "), "A"),
    ((51, " "), "I"),
    ((52, " "), "S"),
    ((53, " "), "G"),
    ((54, " "), "S"),
    ((55, " "), "G"),
    ((56, " "), "S"),
    ((57, " "), "T"),
    ((58, " "), "Y"),
    ((59, " "), "Y"),
    ((60, " "), "A"),
    ((61, " "), "D"),
    ((62, " "), "S"),
    ((63, " "), "V"),
    ((64, " "), "K"),
    ((65, " "), "G"),
    ((66, " "), "R"),
    ((67, " "), "F"),
    ((68, " "), "T"),
    ((69, " "), "I"),
    ((70, " "), "S"),
    ((71, " "), "R"),
    ((72, " "), "D"),
    ((73, " "), "N"),
    ((74, " "), "S"),
    ((75, " "), "K"),
    ((76, " "), "N"),
    ((77, " "), "T"),
    ((78, " "), "L"),
    ((79, " "), "Y"),
    ((80, " "), "L"),
    ((81, " "), "Q"),
    ((82, " "), "M"),
    ((83, " "), "N"),
    ((84, " "), "S"),
    ((85, " "), "L"),
    ((86, " "), "R"),
    ((87, " "), "A"),
    ((88, " "), "E"),
    ((89, " "), "D"),
    ((90, " "), "T"),
    ((91, " "), "A"),
    ((92, " "), "V"),
    ((93, " "), "Y"),
    ((94, " "), "Y"),
    ((95, " "), "C"),
    ((96, " "), "A"),
    ((97, " "), "R"),
]
VL_NUMBERING = [
    ((1, " "), "D"),
    ((2, " "), "I"),
    ((3, " "), "Q"),
    ((4, " "), "M"),
    ((5, " "), "T"),
    ((6, " "), "Q"),
    ((7, " "), "S"),
    ((8, " "), "P"),
    ((9, " "), "S"),
    ((10, " "), "S"),
    ((11, " "), "L"),
    ((12, " "), "S"),
    ((13, " "), "A"),
    ((14, " "), "S"),
    ((15, " "), "V"),
    ((16, " "), "G"),
    ((17, " "), "D"),
    ((18, " "), "R"),
    ((19, " "), "V"),
    ((20, " "), "T"),
    ((21, " "), "I"),
    ((22, " "), "T"),
    ((23, " "), "C"),
    ((24, " "), "R"),
    ((25, " "), "A"),
    ((26, " "), "S"),
    ((27, " "), "Q"),
    ((28, " "), "D"),
    ((29, " "), "I"),
    ((30, " "), "S"),
    ((31, " "), "N"),
    ((32, " "), "Y"),
    ((33, " "), "L"),
    ((34, " "), "N"),
    ((35, " "), "W"),
    ((36, " "), "Y"),
    ((37, " "), "Q"),
    ((38, " "), "Q"),
    ((39, " "), "K"),
    ((40, " "), "P"),
    ((41, " "), "G"),
    ((42, " "), "K"),
    ((43, " "), "A"),
    ((44, " "), "P"),
    ((45, " "), "K"),
    ((46, " "), "L"),
    ((47, " "), "L"),
    ((48, " "), "I"),
    ((49, " "), "Y"),
    ((50, " "), "A"),
    ((51, " "), "A"),
    ((52, " "), "S"),
    ((53, " "), "S"),
    ((54, " "), "L"),
    ((55, " "), "Q"),
    ((56, " "), "S"),
    ((57, " "), "G"),
    ((58, " "), "V"),
    ((59, " "), "P"),
    ((60, " "), "S"),
    ((61, " "), "R"),
    ((62, " "), "F"),
    ((63, " "), "S"),
    ((64, " "), "G"),
    ((65, " "), "S"),
    ((66, " "), "G"),
    ((67, " "), "S"),
    ((68, " "), "G"),
    ((69, " "), "T"),
    ((70, " "), "D"),
    ((71, " "), "F"),
    ((72, " "), "T"),
    ((73, " "), "L"),
    ((74, " "), "T"),
    ((75, " "), "I"),
    ((76, " "), "S"),
    ((77, " "), "S"),
    ((78, " "), "L"),
    ((79, " "), "Q"),
    ((80, " "), "P"),
    ((81, " "), "E"),
    ((82, " "), "D"),
    ((83, " "), "F"),
    ((84, " "), "A"),
    ((85, " "), "T"),
    ((86, " "), "Y"),
    ((87, " "), "Y"),
    ((88, " "), "C"),
    ((89, " "), "Q"),
    ((90, " "), "Q"),
    ((91, " "), "Y"),
    ((92, " "), "N"),
    ((93, " "), "S"),
    ((94, " "), "Y"),
    ((95, " "), "P"),
    ((96, " "), "L"),
    ((97, " "), "T"),
    ((98, " "), "F"),
    ((99, " "), "G"),
    ((100, " "), "Q"),
    ((101, " "), "G"),
    ((102, " "), "T"),
    ((103, " "), "K"),
    ((104, " "), "V"),
    ((105, " "), "E"),
    ((106, " "), "I"),
    ((107, " "), "K"),
]


def test_annotate_all_schemes_scfv():
    # Annotate both domains
    vh_regions = annotate_all_schemes(VH_NUMBERING)
    vl_regions = annotate_all_schemes(VL_NUMBERING)
    print(vh_regions["kabat"])
    print(vl_regions["kabat"])
    # Assert both domains are annotated
    assert isinstance(vh_regions, dict)
    assert isinstance(vl_regions, dict)
    # Check IMGT regions for VH
    assert "FR1" in vh_regions["imgt"]
    assert "CDR1" in vh_regions["imgt"]
    assert "FR2" in vh_regions["imgt"]
    assert "CDR2" in vh_regions["imgt"]
    assert "FR3" in vh_regions["imgt"]
    # Check Kabat regions for VL
    assert "FR1" in vl_regions["kabat"]
    assert "CDR1" in vl_regions["kabat"]
    assert "FR2" in vl_regions["kabat"]
    assert "CDR2" in vl_regions["kabat"]
    assert "FR3" in vl_regions["kabat"]
    # Check Chothia regions for VH
    assert "CDR1" in vh_regions["chothia"]
    assert "CDR2" in vh_regions["chothia"]
    # Check that CDRs are not empty
    assert len(vh_regions["imgt"]["CDR1"]) > 0
    assert len(vl_regions["imgt"]["CDR1"]) > 0
    assert len(vh_regions["kabat"]["CDR1"]) > 0
    assert len(vl_regions["kabat"]["CDR1"]) > 0
    assert len(vh_regions["chothia"]["CDR1"]) > 0
    assert len(vl_regions["chothia"]["CDR1"]) > 0
