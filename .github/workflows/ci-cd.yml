name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: absequencealign-backend
  FRONTEND_IMAGE_NAME: absequencealign-frontend

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Microconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Install additional pip dependencies
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      # Note: Docker base images are not needed for backend tests
      # They are only needed for Docker tests and E2E tests

      - name: Run backend tests
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing

      - name: Run code formatting check
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          black . --check

      - name: Run linting
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd app/frontend
          npm ci

      - name: Run linting
        run: |
          cd app/frontend
          npm run lint

      - name: Run type checking
        run: |
          cd app/frontend
          npm run type-check

      - name: Run tests
        run: |
          cd app/frontend
          npm run test

      - name: Build frontend
        run: |
          cd app/frontend
          npm run build

  # Docker Tests
  docker-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag base images
        run: |
          # Build base images
          ./scripts/build-base-images.sh
          
          # Tag base images for testing (but don't push)
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest

      - name: Test backend Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-backend-base:latest \
            -f ./app/backend/Dockerfile \
            -t test-backend .

      - name: Test frontend Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile \
            -t test-frontend ./app/frontend

      - name: Test frontend test Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile.test \
            -t test-frontend-test ./app/frontend

      - name: Test frontend E2E Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile.e2e \
            -t test-frontend-e2e ./app/frontend

  # Push Base Images (only on non-PR events)
  push-base-images:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base images
        run: |
          # Build base images
          ./scripts/build-base-images.sh
          
          # Tag and push base images to GitHub Container Registry
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest

  # E2E Tests - Parallel
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, push-base-images]
    strategy:
      matrix:
        # Split Cypress tests into parallel jobs
        spec: [
          'cypress/e2e/0-health-check.cy.ts',
          'cypress/e2e/1-scfv-annotation.cy.ts',
          'cypress/e2e/2-igG-dvdi-tcr.cy.ts',
          'cypress/e2e/quick-ui-test.cy.ts'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd app/frontend
          npm ci

      - name: Setup Microconda for backend
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Install additional pip dependencies
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      - name: Start backend server
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          PYTHONPATH="$(pwd)/.." python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/health

      - name: Build frontend for production-like testing
        run: |
          cd app/frontend
          npm run build

      - name: Start frontend with Nginx (production-like)
        run: |
          cd app/frontend
          # Verify build output exists
          echo "Checking build output..."
          ls -la dist/
          
          # Verify nginx config exists
          echo "Checking nginx config..."
          ls -la nginx.ci.conf
          
          # Use a simple nginx container to serve the built assets
          docker run -d --name frontend-nginx \
            -v $(pwd)/dist:/usr/share/nginx/html:ro \
            -v $(pwd)/nginx.ci.conf:/etc/nginx/conf.d/default.conf:ro \
            -p 5679:80 \
            nginx:alpine
          
          # Check if container is running
          echo "Checking container status..."
          docker ps -a
          docker logs frontend-nginx
          
          sleep 10
          
          # Test connection with more verbose output
          echo "Testing connection..."
          curl -v http://localhost:5679 || echo "Connection failed"

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: app/frontend
          spec: ${{ matrix.spec }}
          config: baseUrl=http://localhost:5679,defaultCommandTimeout=10000,requestTimeout=15000,responseTimeout=15000
          wait-on: 'http://localhost:5679'
          wait-on-timeout: 120

      # Screenshots and videos disabled for faster CI/CD
      # - name: Upload screenshots
      #   uses: actions/upload-artifact@v4
      #   if: failure()
      #   with:
      #     name: cypress-screenshots-${{ matrix.spec }}
      #     path: app/frontend/cypress/screenshots
      #     if-no-files-found: ignore

      # - name: Upload videos
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: cypress-videos-${{ matrix.spec }}
      #     path: app/frontend/cypress/videos
      #     if-no-files-found: ignore

      - name: Cleanup frontend container
        if: always()
        run: |
          docker stop frontend-nginx || true
          docker rm frontend-nginx || true

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests, push-base-images, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests, e2e-tests, security-scan]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (on release)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      # Add your deployment steps here
      # Example for deploying to a server via SSH:
      - name: Deploy to production server
        run: |
          echo "🚀 Deployment would happen here"
          echo "Backend Image: ${{ env.BACKEND_IMAGE }}"
          echo "Frontend Image: ${{ env.FRONTEND_IMAGE }}"
          # Example deployment commands:
          # ssh user@server "docker-compose -f docker-compose.prod.yml pull"
          # ssh user@server "docker-compose -f docker-compose.prod.yml up -d"

      # Alternative: Deploy to cloud platforms
      # - name: Deploy to AWS ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     service: absequencealign-service
      #     cluster: absequencealign-cluster

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
