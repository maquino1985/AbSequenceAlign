name: CI/CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: maquino1985                 # <- lock pushes to PAT owner namespace
  BACKEND_IMAGE_NAME: absequencealign-backend
  FRONTEND_IMAGE_NAME: absequencealign-frontend

jobs:
  pre-checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    steps:
      - name: Echo context
        run: |
          echo "repo_owner=${{ github.repository_owner }}"
          echo "actor=${{ github.actor }}"
          echo "event=${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "fork?=${{ github.event.pull_request.head.repo.fork }}"
          fi

  # --- Proves PAT can push before we waste time building big images ---
  auth-smoke:
    name: GHCR auth smoke test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR with PAT
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: maquino1985
          password: ${{ secrets.CR_PAT }}
      - name: Build tiny image
        run: |
          printf 'FROM busybox:latest\nCMD ["echo","ok"]\n' > Dockerfile
          docker build -t ghcr.io/${{ env.IMAGE_OWNER }}/ghcr-auth-smoke:run-${{ github.run_id }} .
      - name: Push tiny image
        run: |
          docker push ghcr.io/${{ env.IMAGE_OWNER }}/ghcr-auth-smoke:run-${{ github.run_id }}

  # -------------------- Backend tests --------------------
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false
      - shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git
      - shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
      - shell: bash -l {0}
        run: conda activate AbSequenceAlign && cd app/backend && black . --check
      - shell: bash -l {0}
        run: conda activate AbSequenceAlign && cd app/backend && flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics && flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      - uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # -------------------- Frontend tests --------------------
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json
      - run: cd app/frontend && npm ci
      - run: cd app/frontend && npm run lint
      - run: cd app/frontend && npm run type-check
      - run: cd app/frontend && npm run test
      - run: cd app/frontend && npm run build

  # -------------------- Docker build tests (no pushes) --------------------
  docker-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in (builds only, OK to use GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build base images locally
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest
      - run: docker build --build-arg BASE_IMAGE=absequencealign-backend-base:latest -f ./app/backend/Dockerfile -t test-backend .
      - run: docker build --build-arg BASE_IMAGE=absequencealign-frontend-base:latest -f ./app/frontend/Dockerfile -t test-frontend ./app/frontend
      - run: docker build --build-arg BASE_IMAGE=absequencealign-frontend-base:latest -f ./app/frontend/Dockerfile.test -t test-frontend-test ./app/frontend
      - run: docker build --build-arg BASE_IMAGE=absequencealign-frontend-base:latest -f ./app/frontend/Dockerfile.e2e -t test-frontend-e2e ./app/frontend

  # -------------------- PR base image pushes (same-repo PRs only) --------------------
  build-pr-base-images:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in (GITHUB_TOKEN ok for same-repo PR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push PR base images
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:pr-${{ github.event.number }}
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:pr-${{ github.event.number }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:pr-${{ github.event.number }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:pr-${{ github.event.number }}

  # -------------------- Push base images on non-PR (PAT) --------------------
  push-base-images:
    runs-on: ubuntu-latest
    needs: [docker-tests, auth-smoke]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: maquino1985
          password: ${{ secrets.CR_PAT }}
      - name: Build & push base images
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-frontend-base:latest
          docker push ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-backend-base:latest
          docker push ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-frontend-base:latest

  # -------------------- E2E --------------------
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests]
    strategy:
      matrix:
        spec:
          - 'cypress/e2e/0-health-check.cy.ts'
          - 'cypress/e2e/1-scfv-annotation.cy.ts'
          - 'cypress/e2e/2-igG-dvdi-tcr.cy.ts'
          - 'cypress/e2e/quick-ui-test.cy.ts'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json
      - run: cd app/frontend && npm ci
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false
      - shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git
      - shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          PYTHONPATH="$(pwd)/.." python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/health
      - run: cd app/frontend && npm run build
      - name: Start frontend with Nginx
        run: |
          cd app/frontend
          docker run -d --name frontend-nginx \
            -v $(pwd)/dist:/usr/share/nginx/html:ro \
            -v $(pwd)/nginx.ci.conf:/etc/nginx/conf.d/default.conf:ro \
            -p 5679:80 nginx:alpine
          sleep 10
          curl -v http://localhost:5679 || echo "Connection failed"
      - name: Run Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: app/frontend
          spec: ${{ matrix.spec }}
          config: baseUrl=http://localhost:5679,defaultCommandTimeout=10000,requestTimeout=15000,responseTimeout=15000
          wait-on: 'http://localhost:5679'
          wait-on-timeout: 120
      - if: always()
        run: docker rm -f frontend-nginx || true

  # -------------------- Security scan --------------------
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests, e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # -------------------- Build & push release images (PAT) --------------------
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests, e2e-tests, security-scan, auth-smoke]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: maquino1985
          password: ${{ secrets.CR_PAT }}
      - name: Backend meta
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      - name: Frontend meta
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # -------------------- Deploy on release (no-op placeholder) --------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
      - name: Setup deployment env
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      - name: Deploy
        run: |
          echo "🚀 Deployment would happen here"
          echo "Backend Image: ${{ env.BACKEND_IMAGE }}"
          echo "Frontend Image: ${{ env.FRONTEND_IMAGE }}"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
