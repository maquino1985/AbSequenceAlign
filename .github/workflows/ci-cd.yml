name: CI/CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: absequencealign-backend
  FRONTEND_IMAGE_NAME: absequencealign-frontend

jobs:
  pre-checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    steps:
      - name: Echo context
        run: |
          echo "repo_owner=${{ github.repository_owner }}"
          echo "actor=${{ github.actor }}"
          echo "event=${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "fork?=${{ github.event.pull_request.head.repo.fork }}"
          fi

      - name: Identify PAT owner (debug)
        env:
          TOKEN: ${{ secrets.CR_PAT }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq >/dev/null
          curl -sH "Authorization: Bearer $TOKEN" https://api.github.com/user | jq -r '["PAT login:", .login, "type:", .type] | @tsv'

  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Microconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Install additional pip dependencies
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      - name: Run backend tests
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing

      - name: Run code formatting check
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          black . --check

      - name: Run linting
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
          cd app/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd app/frontend
          npm ci

      - name: Run linting
        run: |
          cd app/frontend
          npm run lint

      - name: Run type checking
        run: |
          cd app/frontend
          npm run type-check

      - name: Run tests
        run: |
          cd app/frontend
          npm run test

      - name: Build frontend
        run: |
          cd app/frontend
          npm run build

  docker-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Use GITHUB_TOKEN to log in for local test builds (no pushes here)
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag base images
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest

      - name: Test backend Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-backend-base:latest \
            -f ./app/backend/Dockerfile \
            -t test-backend .

      - name: Test frontend Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile \
            -t test-frontend ./app/frontend

      - name: Test frontend test Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile.test \
            -t test-frontend-test ./app/frontend

      - name: Test frontend E2E Docker build
        run: |
          docker build \
            --build-arg BASE_IMAGE=absequencealign-frontend-base:latest \
            -f ./app/frontend/Dockerfile.e2e \
            -t test-frontend-e2e ./app/frontend

  # Build PR base images only for same-repo PRs (no forks)
  build-pr-base-images:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry (GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push PR base images
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:pr-${{ github.event.number }}
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:pr-${{ github.event.number }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:pr-${{ github.event.number }}
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:pr-${{ github.event.number }}

  # Push Base Images on non-PR events (use PAT)
  push-base-images:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry (PAT)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PAT_USERNAME }}   # PAT owner username
          password: ${{ secrets.CR_PAT }}         # your PAT secret

      - name: Build and push base images
        run: |
          ./scripts/build-base-images.sh
          docker tag absequencealign-backend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-backend-base:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/absequencealign-frontend-base:latest

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-tests]
    strategy:
      matrix:
        spec:
          - 'cypress/e2e/0-health-check.cy.ts'
          - 'cypress/e2e/1-scfv-annotation.cy.ts'
          - 'cypress/e2e/2-igG-dvdi-tcr.cy.ts'
          - 'cypress/e2e/quick-ui-test.cy.ts'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd app/frontend
          npm ci

      - name: Setup Microconda for backend
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: AbSequenceAlign
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Install additional pip dependencies
        shell: bash -l {0}
        run: |
          conda activate AbSequenceAlign
