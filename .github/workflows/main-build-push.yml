name: Main Build & Push (with canary)

on:
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: maquino1985
  BACKEND_IMAGE_NAME: absequencealign-backend
  FRONTEND_IMAGE_NAME: absequencealign-frontend
  BACKEND_BASE_REPO: absequencealign-backend-base
  FRONTEND_BASE_REPO: absequencealign-frontend-base
  CANARY_REPO: abseq-canary

jobs:
  # Keep this light; full tests run in pr-e2e and you can add push-trigger there if desired
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Quick sanity
        run: echo "Skipping heavy tests here; this job exists to gate push-images."

  push-images:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure CR_PAT exists
        run: |
          if [ -z "${{ secrets.CR_PAT }}" ]; then
            echo "CR_PAT is not set. Add CR_PAT repo/org secret with PAT that has write:packages." >&2
            exit 1
          fi

      - name: Force fresh GHCR login
        run: |
          docker logout ghcr.io || true

      - name: Login to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.IMAGE_OWNER }}
          password: ${{ secrets.CR_PAT }}

      - name: Who am I (debug)
        env:
          TOKEN: ${{ secrets.CR_PAT }}
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          echo "Target namespace: ghcr.io/${{ env.IMAGE_OWNER }}"
          curl -sH "Authorization: Bearer $TOKEN" https://api.github.com/user | jq -r '{login, type}'

      # ---------- Canary push to brand-new repo tag ----------
      - name: Build & push canary
        run: |
          set -euxo pipefail
          echo 'FROM busybox:latest' > Dockerfile
          echo 'CMD ["echo","canary-ok"]' >> Dockerfile
          docker build -t ghcr.io/${IMAGE_OWNER}/${CANARY_REPO}:run-${GITHUB_RUN_ID} .
          docker push ghcr.io/${IMAGE_OWNER}/${CANARY_REPO}:run-${GITHUB_RUN_ID}

      # ---------- Build base images locally via your script ----------
      - name: Build base images (local)
        run: |
          set -euxo pipefail
          ./scripts/build-base-images.sh

      # ---------- Push base images to GHCR (latest) ----------
      - name: Tag & push base images (latest)
        run: |
          set -euxo pipefail
          docker tag ${BACKEND_BASE_REPO}:latest ghcr.io/${IMAGE_OWNER}/${BACKEND_BASE_REPO}:latest
          docker tag ${FRONTEND_BASE_REPO}:latest ghcr.io/${IMAGE_OWNER}/${FRONTEND_BASE_REPO}:latest
          docker push ghcr.io/${IMAGE_OWNER}/${BACKEND_BASE_REPO}:latest
          docker push ghcr.io/${IMAGE_OWNER}/${FRONTEND_BASE_REPO}:latest

      # ---------- Preflight pulls so later builds don't default to Docker Hub ----------
      - name: Preflight pull backend base
        run: docker pull ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_BASE_REPO }}:latest
      - name: Preflight pull frontend base
        run: docker pull ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_BASE_REPO }}:latest

      # ---------- App image metadata ----------
      - name: Backend meta
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Frontend meta
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      # ---------- Build & push app images (amd64 only to avoid QEMU/Conda pain) ----------
      - name: Build & push backend (amd64 only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/backend/Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            BASE_IMAGE=ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_BASE_REPO }}:latest
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push frontend (amd64 only)
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            BASE_IMAGE=ghcr.io/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_BASE_REPO }}:latest
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
