name: Main Build & Push (with canary)

on:
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: maquino1985
  BACKEND_IMAGE_NAME: absequencealign-backend
  FRONTEND_IMAGE_NAME: absequencealign-frontend
  CANARY_REPO: abseq-canary      # brand-new repo name to avoid old perms/visibility conflicts

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # OPTIONAL: run your unit/lint here if you want before pushing
      - name: Quick backend health
        run: |
          echo "skipping heavy tests in this job"

  push-images:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # 🔒 Clean any stale auth and log in with PAT
      - name: Force fresh GHCR login (PAT)
        run: |
          set -euxo pipefail
          docker logout ghcr.io || true
        shell: bash
      - name: Login with PAT
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: maquino1985
          password: ${{ secrets.CR_PAT }}

      # 🕵️ Sanity: confirm PAT owner/server
      - name: Print PAT identity (debug)
        env:
          TOKEN: ${{ secrets.CR_PAT }}
        run: |
          set -e
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          curl -sH "Authorization: Bearer $TOKEN" https://api.github.com/user | jq -r '{login, type}'
          echo "Target namespace: ghcr.io/${IMAGE_OWNER}"

      # 🐣 Canary push to NEW repo name -> proves PAT+namespace right now
      - name: Build & push canary
        run: |
          set -euxo pipefail
          echo 'FROM busybox:latest' > Dockerfile
          echo 'CMD ["echo","canary-ok"]' >> Dockerfile
          docker build -t ghcr.io/${IMAGE_OWNER}/${CANARY_REPO}:run-${GITHUB_RUN_ID} .
          docker push ghcr.io/${IMAGE_OWNER}/${CANARY_REPO}:run-${GITHUB_RUN_ID}

      # 🧱 Build your real images (no push yet)
      - name: Build base images (local)
        run: |
          set -euxo pipefail
          ./scripts/build-base-images.sh

      # 🚀 Push real base images
      - name: Push base images
        run: |
          set -euxo pipefail
          docker tag absequencealign-backend-base:latest ghcr.io/${IMAGE_OWNER}/absequencealign-backend-base:latest
          docker tag absequencealign-frontend-base:latest ghcr.io/${IMAGE_OWNER}/absequencealign-frontend-base:latest
          docker push ghcr.io/${IMAGE_OWNER}/absequencealign-backend-base:latest
          docker push ghcr.io/${IMAGE_OWNER}/absequencealign-frontend-base:latest

      # 🧾 Buildx multi-arch release images (if you want them here)
      - name: Backend meta
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Frontend meta
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
      - name: Build & push backend (amd64 only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/backend/Dockerfile
          platforms: linux/amd64            # <-- was linux/amd64,linux/arm64
          push: true
          build-args: |
            BASE_IMAGE=ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-backend-base:latest
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build & push frontend (amd64 only)
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          platforms: linux/amd64            # <-- was linux/amd64,linux/arm64
          push: true
          build-args: |
            BASE_IMAGE=ghcr.io/${{ env.IMAGE_OWNER }}/absequencealign-frontend-base:latest
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

