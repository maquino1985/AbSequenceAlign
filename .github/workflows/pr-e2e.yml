name: PR E2E (no-push)

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  e2e:
    name: Run full tests + E2E on PR (no pushes)
    runs-on: ubuntu-latest
    env:
      BACKEND_CONDA_ENV: AbSequenceAlign

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      # ---------- Backend: setup + unit/lint ----------
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: ${{ env.BACKEND_CONDA_ENV }}
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Backend deps (extra)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      - name: Backend unit tests + lint + format check
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
          black . --check
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

      # ---------- Frontend: setup + unit/lint/build ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Frontend install
        run: |
          set -euo pipefail
          cd app/frontend
          npm ci

      - name: Frontend lint + types + unit tests
        run: |
          set -euo pipefail
          cd app/frontend
          npm run lint
          npm run type-check
          npm run test

      - name: Frontend build
        run: |
          set -euo pipefail
          cd app/frontend
          npm run build

      # ---------- Bring up services and run Cypress ----------
      - name: Start backend (uvicorn)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          PYTHONPATH="$(pwd)/.." python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          # wait and health check
          for i in {1..30}; do
            curl -sf http://localhost:8000/health && break
            sleep 1
          done
          curl -f http://localhost:8000/health

      - name: Serve frontend with nginx (prod-like)
        run: |
          set -euo pipefail
          cd app/frontend
          docker run -d --name frontend-nginx \
            -v "$(pwd)/dist":/usr/share/nginx/html:ro \
            -v "$(pwd)/nginx.ci.conf":/etc/nginx/conf.d/default.conf:ro \
            -p 5679:80 nginx:alpine
          for i in {1..30}; do
            curl -sf http://localhost:5679 && break
            sleep 1
          done
          curl -f http://localhost:5679

      - name: Run Cypress E2E
        uses: cypress-io/github-action@v6
        with:
          working-directory: app/frontend
          spec: |
            cypress/e2e/0-health-check.cy.ts,
            cypress/e2e/1-scfv-annotation.cy.ts,
            cypress/e2e/2-igG-dvdi-tcr.cy.ts,
            cypress/e2e/quick-ui-test.cy.ts
          config: baseUrl=http://localhost:5679,defaultCommandTimeout=10000,requestTimeout=15000,responseTimeout=15000
          wait-on: 'http://localhost:5679'
          wait-on-timeout: 120

      - name: Cleanup nginx
        if: always()
        run: |
          docker rm -f frontend-nginx || true
