name: PR E2E (no-push)

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  e2e:
    name: Run full tests + E2E on PR (no pushes)
    runs-on: ubuntu-latest
    env:
      BACKEND_CONDA_ENV: AbSequenceAlign

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      # ---------- Cache Database Files ----------
      - name: Cache BLAST and IgBLAST databases
        id: cache-databases
        uses: actions/cache@v4
        with:
          path: |
            data/blast
            data/igblast
          key: ${{ runner.os }}-databases-${{ hashFiles('data/blast/**', 'data/igblast/**') }}-${{ hashFiles('app/backend/infrastructure/adapters/blast_adapter.py', 'app/backend/config.py') }}-${{ contains(github.event.head_commit.message, '[cache-bust]') && 'bust' || 'normal' }}
          restore-keys: |
            ${{ runner.os }}-databases-${{ hashFiles('data/blast/**', 'data/igblast/**') }}-
            ${{ runner.os }}-databases-

      - name: Log database cache status
        run: |
          if [ "${{ steps.cache-databases.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Database cache HIT - using cached BLAST/IgBLAST databases"
          else
            echo "❌ Database cache MISS - downloading fresh databases"
          fi

      # ---------- Backend: setup + unit/lint ----------
      - name: Cache conda environment
        id: cache-conda
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ${{ env.CONDA }}/envs/${{ env.BACKEND_CONDA_ENV }}
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ hashFiles('app/backend/**/*.py') }}-${{ github.sha }}-${{ contains(github.event.head_commit.message, '[cache-bust]') && 'bust' || 'normal' }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ hashFiles('app/backend/**/*.py') }}-
            ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-
            ${{ runner.os }}-conda-

      - name: Log conda cache status
        run: |
          if [ "${{ steps.cache-conda.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Conda cache HIT - using cached environment"
          else
            echo "❌ Conda cache MISS - creating fresh environment"
          fi

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: ${{ env.BACKEND_CONDA_ENV }}
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Backend deps (extra)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      # ---------- Start Docker Services for Backend Tests ----------
      - name: Start BLAST and IgBLAST Docker containers
        run: |
          set -euo pipefail
          # Start BLAST container
          docker run -d --name absequencealign-blast \
            -v "$(pwd)/data/blast:/blast/blastdb:ro" \
            -v "$(pwd)/data/blast/protein:/blast/blastdb/protein:ro" \
            -v "$(pwd)/data/blast/nucleotide:/blast/blastdb/nucleotide:ro" \
            -e BLASTDB=/blast/blastdb:/blast/blastdb/protein:/blast/blastdb/nucleotide \
            ncbi/blast:latest sleep infinity
          
          # Start IgBLAST container
          docker run -d --name absequencealign-igblast \
            -v "$(pwd)/data/igblast:/blast/blastdb:ro" \
            -v "$(pwd)/data/igblast/internal_data:/blast/internal_data:ro" \
            -v "$(pwd)/data/igblast/optional_file:/blast/optional_file:ro" \
            -e IGDATA=/blast \
            ncbi/igblast:latest sleep infinity
          
          # Wait for containers to be ready
          echo "Waiting for BLAST container to be ready..."
          for i in {1..30}; do
            if docker exec absequencealign-blast blastp -help >/dev/null 2>&1; then
              echo "BLAST container is ready"
              break
            fi
            sleep 1
          done
          
          echo "Waiting for IgBLAST container to be ready..."
          for i in {1..30}; do
            if docker exec absequencealign-igblast igblastn -help >/dev/null 2>&1; then
              echo "IgBLAST container is ready"
              break
            fi
            sleep 1
          done

      - name: Backend unit tests + lint + format check
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
          black . --check
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

      # ---------- Frontend: setup + unit/lint/build ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Cache frontend dependencies
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: |
            app/frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('app/frontend/package-lock.json') }}-${{ hashFiles('app/frontend/src/**/*.ts', 'app/frontend/src/**/*.tsx', 'app/frontend/src/**/*.js', 'app/frontend/src/**/*.jsx') }}-${{ github.sha }}-${{ contains(github.event.head_commit.message, '[cache-bust]') && 'bust' || 'normal' }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ hashFiles('app/frontend/package-lock.json') }}-${{ hashFiles('app/frontend/src/**/*.ts', 'app/frontend/src/**/*.tsx', 'app/frontend/src/**/*.js', 'app/frontend/src/**/*.jsx') }}-
            ${{ runner.os }}-frontend-${{ hashFiles('app/frontend/package-lock.json') }}-
            ${{ runner.os }}-frontend-

      - name: Log frontend cache status
        run: |
          if [ "${{ steps.cache-frontend.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Frontend cache HIT - using cached dependencies"
          else
            echo "❌ Frontend cache MISS - installing fresh dependencies"
          fi

      - name: Frontend install
        run: |
          set -euo pipefail
          cd app/frontend
          # Only run npm ci if node_modules doesn't exist (cache miss)
          if [ ! -d "node_modules" ]; then
            npm ci
          else
            echo "Using cached node_modules"
          fi

      - name: Frontend lint + types + unit tests
        run: |
          set -euo pipefail
          cd app/frontend
          npm run lint
          npm run type-check
          npm run test

      - name: Frontend build
        run: |
          set -euo pipefail
          cd app/frontend
          npm run build

      # ---------- Bring up services and run Cypress ----------
      - name: Start backend (uvicorn)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          PYTHONPATH="$(pwd)/.." python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          # wait and health check
          for i in {1..30}; do
            curl -sf http://localhost:8000/health && break
            sleep 1
          done
          curl -f http://localhost:8000/health

      - name: Serve frontend with nginx (prod-like)
        run: |
          set -euo pipefail
          cd app/frontend
          docker run -d --name frontend-nginx \
            -v "$(pwd)/dist":/usr/share/nginx/html:ro \
            -v "$(pwd)/nginx.ci.conf":/etc/nginx/conf.d/default.conf:ro \
            -p 5679:80 nginx:alpine
          for i in {1..30}; do
            curl -sf http://localhost:5679 && break
            sleep 1
          done
          curl -f http://localhost:5679

      - name: Run Cypress E2E
        uses: cypress-io/github-action@v6
        with:
          working-directory: app/frontend
          spec: |
            cypress/e2e/0-health-check.cy.ts,
            cypress/e2e/1-scfv-annotation.cy.ts,
            cypress/e2e/2-igG-dvdi-tcr.cy.ts,
            cypress/e2e/quick-ui-test.cy.ts
          config: baseUrl=http://localhost:5679,defaultCommandTimeout=10000,requestTimeout=15000,responseTimeout=15000
          wait-on: 'http://localhost:5679'
          wait-on-timeout: 120

      - name: Cleanup containers
        if: always()
        run: |
          docker rm -f frontend-nginx || true
          docker rm -f absequencealign-blast || true
          docker rm -f absequencealign-igblast || true
