name: PR E2E (no-push)

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  e2e:
    name: Run full tests + E2E on PR (no pushes)
    runs-on: ubuntu-latest
    env:
      BACKEND_CONDA_ENV: AbSequenceAlign

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Removed LFS dependency to avoid budget issues

      # ---------- Backend: setup + unit/lint ----------
      - name: Cache conda environment
        id: cache-conda
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ${{ env.CONDA }}/envs/${{ env.BACKEND_CONDA_ENV }}
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ hashFiles('app/backend/**/*.py') }}-${{ github.sha }}-${{ contains(github.event.head_commit.message, '[cache-bust]') && 'bust' || 'normal' }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-${{ hashFiles('app/backend/**/*.py') }}-
            ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}-
            ${{ runner.os }}-conda-

      - name: Log conda cache status
        run: |
          if [ "${{ steps.cache-conda.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Conda cache HIT - using cached environment"
          else
            echo "❌ Conda cache MISS - creating fresh environment"
          fi

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          activate-environment: ${{ env.BACKEND_CONDA_ENV }}
          environment-file: environment.yml
          python-version: 3.11
          auto-activate-base: false

      - name: Backend deps (extra)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          pip install asyncpg==0.29.0 psycopg2-binary==2.9.9
          pip install git+https://github.com/oxpig/ANARCI.git

      - name: Backend unit tests + lint + format check (CI mode)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          echo "🧪 Running backend tests in CI mode (skipping database-heavy operations)..."
          
          # Run unit tests that don't require databases
          python -m pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=term-missing -k "not test_igblast_integration and not test_blast_integration"
          
          # Run linting and formatting checks
          black . --check
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage

      # ---------- Frontend: setup + unit/lint/build ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json

      - name: Frontend deps
        run: |
          cd app/frontend
          npm ci

      - name: Frontend unit tests + lint + build
        run: |
          cd app/frontend
          npm run test:ci
          npm run lint
          npm run build

      # ---------- E2E Tests (CI mode - without databases) ----------
      - name: Start backend server (CI mode)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          conda activate "${BACKEND_CONDA_ENV}"
          cd app/backend
          echo "🚀 Starting backend server in CI mode (without database operations)..."
          
          # Start the backend server in CI mode
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
          
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "✅ Backend server is ready"
              break
            fi
            echo "⏳ Waiting for backend server... ($i/30)"
            sleep 2
          done

      - name: Start frontend dev server
        run: |
          cd app/frontend
          npm run dev &
          echo $! > frontend.pid
          
          # Wait for frontend to be ready
          for i in {1..30}; do
            if curl -f http://localhost:5173 >/dev/null 2>&1; then
              echo "✅ Frontend server is ready"
              break
            fi
            echo "⏳ Waiting for frontend server... ($i/30)"
            sleep 2
          done

      - name: Run Cypress E2E tests (CI mode)
        run: |
          cd app/frontend
          echo "🧪 Running Cypress tests in CI mode (skipping database-dependent tests)..."
          
          # Run only tests that don't require BLAST/IgBLAST databases
          npm run cypress:run:ci

      - name: Stop servers
        if: always()
        run: |
          echo "🛑 Stopping servers..."
          if [ -f app/backend/backend.pid ]; then
            kill $(cat app/backend/backend.pid) 2>/dev/null || true
          fi
          if [ -f app/frontend/frontend.pid ]; then
            kill $(cat app/frontend/frontend.pid) 2>/dev/null || true
          fi

      # ---------- Cleanup Docker containers ----------
      - name: Cleanup Docker containers
        if: always()
        run: |
          echo "🧹 Cleaning up Docker containers..."
          docker stop absequencealign-blast absequencealign-igblast 2>/dev/null || true
          docker rm absequencealign-blast absequencealign-igblast 2>/dev/null || true
